<sheet version="5" app_version="22.1">
<markup version="1" identifier="markdownxl" displayName="Markdown XL">
	<tag definition="heading1" pattern="#"></tag>
	<tag definition="heading2" pattern="##"></tag>
	<tag definition="heading3" pattern="###"></tag>
	<tag definition="heading4" pattern="####"></tag>
	<tag definition="heading5" pattern="#####"></tag>
	<tag definition="heading6" pattern="######"></tag>
	<tag definition="codeblock" pattern="''"></tag>
	<tag definition="codeblock" pattern="``"></tag>
	<tag definition="comment" pattern="%%"></tag>
	<tag definition="nativeblock" pattern="~~"></tag>
	<tag definition="blockquote" pattern="&gt;"></tag>
	<tag definition="orderedList" pattern="\d."></tag>
	<tag definition="unorderedList" pattern="*"></tag>
	<tag definition="unorderedList" pattern="+"></tag>
	<tag definition="unorderedList" pattern="-"></tag>
	<tag definition="divider" pattern="----"></tag>
	<tag definition="filename" pattern="@:"></tag>
	<tag definition="code" startPattern="`" endPattern="`"></tag>
	<tag definition="delete" startPattern="||" endPattern="||"></tag>
	<tag definition="emph" startPattern="_" endPattern="_"></tag>
	<tag definition="emph" startPattern="*" endPattern="*"></tag>
	<tag definition="inlineComment" startPattern="++" endPattern="++"></tag>
	<tag definition="inlineNative" startPattern="~" endPattern="~"></tag>
	<tag definition="mark" startPattern="::" endPattern="::"></tag>
	<tag definition="strong" startPattern="__" endPattern="__"></tag>
	<tag definition="strong" startPattern="**" endPattern="**"></tag>
	<tag definition="annotation" startPattern="{" endPattern="}"></tag>
	<tag definition="link" startPattern="[" endPattern="]"></tag>
	<tag definition="footnote" pattern="(fn)"></tag>
	<tag definition="image" pattern="(img)"></tag>
	<tag definition="video" pattern="(vid)"></tag>
</markup>
<string xml:space="preserve">
<p><tags><tag kind="nativeblock">￼</tag></tags>&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6"&gt;&lt;/script&gt;</p>
<p><tags><tag kind="nativeblock">￼</tag></tags>&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"&gt;&lt;/script&gt;</p>
<p></p>
<p><tags><tag kind="heading1">#</tag></tags>Data analysis exercise: <element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element> COVID19 in México</p>
<p></p>
<p><tags><tag kind="heading6">######</tag></tags>Alejandro Osornio<element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element>December 2021</p>
<p></p>
<p><tags><tag kind="heading5">#####</tag></tags><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element> Abstract</p>
<p><tags><tag kind="heading6">######</tag></tags>COVID19 hit every place on the earth. An analysis of open data from México will reveal the overall situation in México.</p>
<p><tags><tag kind="heading6">######</tag></tags>This paper aims to describe it by showing plenty of plots and graphs, explaining how to produce them in the process.</p>
<p><tags><tag kind="heading6">######</tag></tags>The purpose, improve my general data analysis and manipulation ability, practicing methods used to produce high-quality materials like this web page and the media displayed in it.</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>About the data</p>
<p>The data was uploaded by José Héctor Paredes Martínez, Epidemiological Notification and Registry Director of the Secretaría de Salud at Mexico’s government.</p>
<p>It’s composed of 12,133,530 rows of registers containing a variety of columns of information like death date, gender of the person, whether an intubation was necessary, nationality, and more data which help get an idea of the situation in México.</p>
<p>The data is being manipulated with <element kind="strong" startTag="**" endTag="**">Wolfram Mathematica</element> 13.0.0, splitting the rows with the rust crate, <element kind="strong" startTag="**" endTag="**">split-csv</element>, into 101 smaller files for easier processing.</p>
<p></p>
<p>It is necessary to split the 2 GB, CSV file since trying to import all 12 million rows  at once into a dataset fails/takes more than 30 minutes. Being able to process information quickly is better, and splitting the contents allow to gain speed and flexibility when coding the analysis. </p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Counting</p>
<p></p>
<p>All 12 million rows correspond to an individual visit to an attention unit. To get the evolution of attendance at health centers, we can use the following code.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>result = &lt;||&gt;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	file = "~/Downloads/covid/covid_"&lt;&gt;ToString@file&lt;&gt;".csv";</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Print["Loading... "&lt;&gt;file];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	data = Import[file, {"CSV", "Dataset"}, "HeaderLines"-&gt;1];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	dates = Counts[Normal@data[All, "FECHA_INGRESO"]];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	result = Merge[{result, dates}, Total],</p>
<p><tags><tag kind="codeblock">￼</tag></tags>{file, 1, 101}]</p>
<p><tags><tag kind="codeblock">￼</tag></tags></p>
<p><tags><tag kind="codeblock">￼</tag></tags>dates = Flatten /@ List @@@ Normal @ result;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[dates[[n]][[1]] = FromDateString[dates[[n]][[1]]], {n, 1, Length[dates]}];</p>
<p><tags><tag kind="codeblock">￼</tag></tags></p>
<p><tags><tag kind="codeblock">￼</tag></tags>DateListPlot[dates, PlotRange-&gt;{{Automatic, FromDateString["2021-12-14"]}, Automatic}, ImageSize-&gt;Full]</p>
<p></p>
<p>Overall, we plot an association that stores the processed data for each file.</p>
<p></p>
<p>First, an empty association is declared.</p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>result = &lt;||&gt;</p>
<p></p>
<p>Then we run some code <element kind="inlineNative" startTag="~" endTag="~">\( n \)</element>  times, where <element kind="inlineNative" startTag="~" endTag="~">\( n \)</element>   is the number of files with format <element kind="code" startTag="`" endTag="`">NAME_n.csv</element>.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>Do[</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	(* Some code *),</p>
<p><tags><tag kind="codeblock">￼</tag></tags>{file, 1, 101}]</p>
<p></p>
<p>Thus, for each file, first we get its path to open it</p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>file = "~/Downloads/covid/covid_"&lt;&gt;ToString@file&lt;&gt;".csv";</p>
<p></p>
<p>With a hardcoded path, concatenating <element kind="code" startTag="`" endTag="`">&lt;&gt;</element> the number of files with <element kind="code" startTag="`" endTag="`">&lt;&gt;ToString@file&lt;&gt; </element></p>
<p>Then load it into a dataset:</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>data = Import[file, {"CSV", "Dataset"}, "HeaderLines"-&gt;1];</p>
<p></p>
<p>Create a list containing the values for the column <element kind="code" startTag="`" endTag="`">"FECHA_INGRESO"</element> from each row.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>Normal@data[All, "FECHA_INGRESO"]</p>
<p></p>
<p>And count the number of occurrences of the values with <element kind="code" startTag="`" endTag="`">Count</element>, then store the result to <element kind="code" startTag="`" endTag="`">dates</element>, which is an association with Date <element kind="inlineNative" startTag="~" endTag="~">\( \to \)</element>  NOcurrences</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>dates = Counts[Normal@data[All, "FECHA_INGRESO"]];</p>
<p></p>
<p>Finally, use <element kind="code" startTag="`" endTag="`">Merge</element> with <element kind="code" startTag="`" endTag="`">Total</element> to add <element kind="code" startTag="`" endTag="`">dates</element>  association to <element kind="code" startTag="`" endTag="`">results</element>, merging the new dates as new keys or adding values for already existing keys.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>result = Merge[{result, dates}, Total],</p>
<p></p>
<p><element kind="image"><attribute identifier="image">f4ebb9275cbc4560b92807d6587b340b</attribute></element></p>
<p><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 1: Number of people attending to a health center</element></p>
<p></p>
<p></p>
<p></p></string>
</sheet>