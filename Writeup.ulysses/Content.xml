<sheet version="5" app_version="24.5">
<markup version="1" identifier="markdownxl" displayName="Markdown XL">
	<tag definition="heading1" pattern="#"></tag>
	<tag definition="heading2" pattern="##"></tag>
	<tag definition="heading3" pattern="###"></tag>
	<tag definition="heading4" pattern="####"></tag>
	<tag definition="heading5" pattern="#####"></tag>
	<tag definition="heading6" pattern="######"></tag>
	<tag definition="codeblock" pattern="``"></tag>
	<tag definition="codeblock" pattern="''"></tag>
	<tag definition="comment" pattern="%%"></tag>
	<tag definition="nativeblock" pattern="~~"></tag>
	<tag definition="blockquote" pattern="&gt;"></tag>
	<tag definition="orderedList" pattern="\d."></tag>
	<tag definition="unorderedList" pattern="*"></tag>
	<tag definition="unorderedList" pattern="+"></tag>
	<tag definition="unorderedList" pattern="-"></tag>
	<tag definition="divider" pattern="----"></tag>
	<tag definition="filename" pattern="@:"></tag>
	<tag definition="code" startPattern="`" endPattern="`"></tag>
	<tag definition="delete" startPattern="||" endPattern="||"></tag>
	<tag definition="emph" startPattern="*" endPattern="*"></tag>
	<tag definition="emph" startPattern="_" endPattern="_"></tag>
	<tag definition="inlineComment" startPattern="++" endPattern="++"></tag>
	<tag definition="inlineNative" startPattern="~" endPattern="~"></tag>
	<tag definition="mark" startPattern="::" endPattern="::"></tag>
	<tag definition="strong" startPattern="__" endPattern="__"></tag>
	<tag definition="strong" startPattern="**" endPattern="**"></tag>
	<tag definition="annotation" startPattern="{" endPattern="}"></tag>
	<tag definition="link" startPattern="[" endPattern="]"></tag>
	<tag definition="footnote" pattern="(fn)"></tag>
	<tag definition="image" pattern="(img)"></tag>
	<tag definition="video" pattern="(vid)"></tag>
</markup>
<string xml:space="preserve">
<p><element kind="inlineComment" startTag="++" endTag="++">COVID19</element></p>
<p></p>
<p><tags><tag kind="nativeblock">￼</tag></tags>&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6"&gt;&lt;/script&gt;</p>
<p><tags><tag kind="nativeblock">￼</tag></tags>&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"&gt;&lt;/script&gt;</p>
<p></p>
<p></p>
<p><tags><tag kind="heading1">#</tag></tags>Data analysis exercise: <element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element> COVID19 in México</p>
<p></p>
<p><tags><tag kind="heading6">######</tag></tags>Alejandro Osornio<element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element>December 2021</p>
<p></p>
<p><tags><tag kind="heading4">####</tag></tags><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element> Abstract</p>
<p>COVID19 hit every place on the earth. An analysis of open data from México will reveal the overall situation in México.</p>
<p>This paper aims to describe it by showing plenty of plots and graphs, explaining how to produce them in the process.</p>
<p>The purpose, improve my general data analysis and manipulation ability, practicing methods used to produce high-quality materials like this web page and the media displayed in it.</p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>About the data</p>
<p>The data was uploaded by José Héctor Paredes Martínez, Epidemiological Notification and Registry Director of the Secretaría de Salud at Mexico’s government.</p>
<p>It’s composed of 12,133,530 rows of registers containing a variety of columns of information like death date, gender of the person, whether an intubation was necessary, nationality, and more data which help get an idea of the situation in México.</p>
<p>The data is being manipulated with <element kind="strong" startTag="**" endTag="**">Wolfram Mathematica</element> 13.0.0, splitting the rows with the rust crate, <element kind="strong" startTag="**" endTag="**">split-csv</element>, into 101 smaller files for easier processing.</p>
<p></p>
<p>It is necessary to split the 2 GB, CSV file since trying to import all 12 million rows  at once into a dataset fails/takes more than 30 minutes. Being able to process information quickly is better, and splitting the contents allow to gain speed and flexibility when coding the analysis. </p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>Counting</p>
<p></p>
<p>This first section visualizes basic information, counting the number of people that was registered, that had been confirmed to have COVID19 , ages, etc.</p>
<p></p>
<p><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element><element kind="strong" startTag="**" endTag="**">All-time attendants</element></p>
<p></p>
<p>All 12 million rows correspond to an individual visit to an attention unit. To get the evolution of attendance at health centers, we can use the following code.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>result = &lt;||&gt;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	file = "~/Downloads/covid/covid_"&lt;&gt;ToString@file&lt;&gt;".csv";</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Print["Loading... "&lt;&gt;file];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	data = Import[file, {"CSV", "Dataset"}, "HeaderLines"-&gt;1];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	dates = Counts[Normal@data[All, "FECHA_INGRESO"]];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	result = Merge[{result, dates}, Total],</p>
<p><tags><tag kind="codeblock">￼</tag></tags>{file, 1, 101}]</p>
<p><tags><tag kind="codeblock">￼</tag></tags></p>
<p><tags><tag kind="codeblock">￼</tag></tags>dates = Flatten /@ List @@@ Normal @ result;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[dates[[n]][[1]] = FromDateString[dates[[n]][[1]]], {n, 1, Length[dates]}];</p>
<p><tags><tag kind="codeblock">￼</tag></tags></p>
<p><tags><tag kind="codeblock">￼</tag></tags>Dplot[dates]</p>
<p></p>
<p>Overall, we plot an association that stores the processed data for each file.</p>
<p></p>
<p>First, an empty association is declared. Then we run some code <element kind="inlineNative" startTag="~" endTag="~">\( n \)</element>  times, where <element kind="inlineNative" startTag="~" endTag="~">\( n \)</element>   is the number of files with format. </p>
<p></p>
<p>For each file, its path is gained by formatting its number with a hardcoded path. Once open, load it into a dataset by creating a list containing the values for the column <element kind="strong" startTag="**" endTag="**">”FECHA<escape>\_</escape>INGRESO”</element> from each row, count the number of occurrences of the values with, store the result to <element kind="strong" startTag="**" endTag="**">dates</element> and, using <element kind="strong" startTag="**" endTag="**">Merge</element> with <element kind="strong" startTag="**" endTag="**">Total</element> , add <element kind="strong" startTag="**" endTag="**">dates</element>  to  <element kind="strong" startTag="**" endTag="**">results</element>, merging the new dates as new keys or adding values for already existing keys.</p>
<p></p>
<p>Finally, transform the association into a matrix of 2 columns and format the dates, for them to be Date objects instead of strings and be able to plot the matrix, and plot the data with the custom function <element kind="strong" startTag="**" endTag="**">Dplot</element>.</p>
<p></p>
<p><element kind="image"><attribute identifier="image">f4ebb9275cbc4560b92807d6587b340b</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 1: Daily people registration over time</element></p>
<p></p>
<p><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element><element kind="strong" startTag="**" endTag="**">Confirmed cases</element></p>
<p></p>
<p>By implementing an algorithm almost identical to the first one, but changing the target column, we can get the number of confirmed COVID19  cases, using a custom function, <element kind="strong" startTag="**" endTag="**"> PerformForEach</element>,  to avoid some boilerplate to open an manage each cdv file:</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>PerformForEach["~/Downloads/covid", &lt;|</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Pre -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		result = &lt;||&gt;;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;),</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Code -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		datesCovid = Counts[Normal@#Data[Select[#"CLASIFICACION_FINAL" == 3 &amp;], "FECHA_INGRESO"]];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		result = Merge[{result, datesCovid}, Total];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;),</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Post -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		datesCovid = Flatten /@ List @@@ Normal @ result;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		Do[datesCovid[[n]][[1]] = FromDateString[datesCovid[[n]][[1]]], {n, 1, Length[datesCovid]}];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		Print@Dplot[datesCovid];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;)</p>
<p><tags><tag kind="codeblock">￼</tag></tags>|&gt;];</p>
<p></p>
<p><element kind="image"><attribute identifier="image">7e528a8019a94b0bad78160f9fbc96f7</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 2: Confirmed COVID19 cases over time</element></p>
<p></p>
<p><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element><element kind="strong" startTag="**" endTag="**">Confirmed vs Total</element></p>
<p></p>
<p>To get a better understanding of what is happening on both plots it’s necessary to make a comparison of some sort between the graphics, the simplest form is to plot both in a single axes space. This can be managed by using <element kind="strong" startTag="**" endTag="**">Show</element>.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>Show[Dplot@dates, Dplot[datesCovid, PlotStyle-&gt; Darker@Red]]</p>
<p></p>
<p><element kind="image"><attribute identifier="image">3f0200060d2d4b95904a26d2d30d51f1</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 3: Total attendance registration and confirmed cases per day over time</element></p>
<p></p>
<p>Taking a look at <element kind="strong" startTag="**" endTag="**">Figure 3</element>, there seems to be a relation between the number of people attending health centers and confirmed cases over time, which may indicate that COVID19 “waves” are merely indicators of people attending to health centers —maybe because of paranoia— and not because theres actually a lot of people infected.</p>
<p></p>
<p>With the purpose of getting a clearer view of this las point, a method may be to view the percentage of people that tested positive for COVID19 of the 200% of people that attended a health center.</p>
<p></p>
<p><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element><element kind="strong" startTag="**" endTag="**">COVID19 confirmed percent by day over time</element></p>
<p></p>
<p>To accomplish this, some more code is needed. Since the arrays extracted from the dataset are in disorder, it is necessary to order them by date like DateListPlot does. Then prepend  0 values to the confirmed covid cases for both arrays to have the same length, and then divide each element of the raw total confirmed cases by the total value of people.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>rawdatesqc = {};</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[AppendTo[rawdatesqc, e[[2]]],  {e, SortBy[datesCovid, AbsoluteTime[#[[1]]] &amp;]}];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>rawdatesqc = PrependTo[rawdatesqc, Table[0, 31+29]];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>rawdatesqc = Flatten[rawdatesqc];</p>
<p></p>
<p>Hence, first we get the array of raw values of total of “patients” with confirmed COVID19, sorted by date and with some extra zeros at te beginning to match lengths.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>rawdatesq = {};</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[AppendTo[rawdatesq, e[[2]]],  {e, SortBy[dates, AbsoluteTime[#[[1]]] &amp;]}];</p>
<p></p>
<p>Then we get the area of the total number of people that was registered at an attendance center. Again, values ares sorted by date.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>percentPerDate = {};</p>
<p><tags><tag kind="codeblock">￼</tag></tags>percents = N[rawdatesqc/rawdatesq * 100];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>Do[percentPerDate = AppendTo[percentPerDate, {SortBy[dates, AbsoluteTime[#[[1]]] &amp;][[i]][[1]], percents[[i]]}], {i, 1, Length[rawdatesq]}];</p>
<p></p>
<p>Finally, a new array is declared, populated with the result of the division of confirmed by total of each index and prepend to each value its corresponding date.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>Dplot[percentPerDate, Filling -&gt; Top, YRange-&gt;{0,100}]</p>
<p></p>
<p><element kind="image"><attribute identifier="image">a9559c0892ef454889ba76831a83a004</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 4: Percent of confirmed cases per the total number of registrations over time</element></p>
<p></p>
<p>From this perspective, there appears to be two COVID19 waves instead of three as displayed at <element kind="strong" startTag="**" endTag="**">Figure 3</element>.</p>
<p></p>
<p><element kind="inlineNative" startTag="~" endTag="~">&lt;/br&gt;</element><element kind="strong" startTag="**" endTag="**">Cases per Administrative Divisions</element></p>
<p></p>
<p>With a similar approach to the method used to count all confirmed cases, but with an extra check to select from each one of the 32 entities of México, an association with 32 associations is gained at the end of <element kind="strong" startTag="**" endTag="**">Code</element> instead of a single result association. </p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>PerformForEach["~/Downloads/covid", &lt;|</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Pre -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		result = &lt;||&gt;;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;),</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Code -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		Do[</p>
<p><tags><tag kind="codeblock">￼</tag></tags>			entity = Counts[Normal@#Data[Select[#"CLASIFICACION_FINAL" == 3 &amp;&amp; #"ENTIDAD_UM" == en &amp;], "FECHA_INGRESO"] ];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>			If [KeyExistsQ[result, en], result[en] = Merge[{result[en], entity}, Total], result[en] = entity];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		,{en, 1, 32}]</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;),</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Post -&gt; ((</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	entity = &lt;||&gt;;</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	plots = {};</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	Do[</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		entity[en] = Flatten /@ List @@@ Normal @ result[en];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		Do[entity[en][[n]][[1]] = FromDateString[entity[en][[n]][[1]]], {n, 1, Length[entity[en]]}];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>		plots = AppendTo[plots, Dplot[entity[en]]];</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	,{en, 1, 32}]</p>
<p><tags><tag kind="codeblock">￼</tag></tags>	)&amp;)</p>
<p><tags><tag kind="codeblock">￼</tag></tags>|&gt;];</p>
<p></p>
<p>Then, a sum of all cases can be computed for each entity.</p>
<p></p>
<p><tags><tag kind="codeblock">￼</tag></tags><attribute identifier="syntax">mathematica</attribute>Table[Sum[e[[2]], {e, entity[en]}], {en, 1, 32}]</p>
<p></p>
<p>Returning:</p>
<p><escape>\{</escape>37876, 83146, 57416, 23697, 97912, 32851, 21214, 71485, 949633, 48989, 198388, 75604, 60673, 162487, 229096, 72058, 48098, 34019,  206653, 79510, 123996, 99596, 58782, 106373, 72865, 99407, 144732, 103770, 26673, 119370, 75034, 41756<escape>\}</escape></p>
<p></p>
<p><element kind="image"><attribute identifier="image">a81b8d9a385349e9a99b4676a48755b3</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 5: Pie chart of total confirmed cases per administrative division</element></p>
<p></p>
<p><element kind="image"><attribute identifier="image">6d64635f2cb049c29791c00f26f51a57</attribute></element></p>
<p><tags><tag kind="heading6">######</tag></tags><element kind="annotation"><attribute identifier="text"><string xml:space="preserve">
</string></attribute>Figure 6: Rectangle chart of total confirmed cases per administrative division</element></p>
<p></p>
<p><tags><tag kind="heading2">##</tag></tags>References</p>
<p></p>
<p><tags><tag>	</tag></tags><element kind="inlineNative" startTag="~" endTag="~">\( \ \ \ \ \ \ \ \)</element> 1.- </p>
</string>
</sheet>